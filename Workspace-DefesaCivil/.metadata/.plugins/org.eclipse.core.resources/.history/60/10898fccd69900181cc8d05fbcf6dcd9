package com.defesacivil.api.controllers;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties.Admin;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.defesacivil.api.domain.Profile;
import com.defesacivil.api.services.ProfileService;


@RestController
@RequestMapping(value = "/profiles")
public class ProfileController {

	@Autowired
	private ProfileService profileService;

	/**
	 * Método de criação do Profile
	 * 
	 * @param profile
	 * @param bindingResult
	 * @param true
	 */

	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<Object> add(@Valid @RequestBody Profile profile, BindingResult bindingResult) {
		if (bindingResult.hasErrors()) {
			return new ResponseEntity<Object>(bindingResult.getAllErrors(), HttpStatus.NOT_ACCEPTABLE);

		} else {
			Optional<Profile> profileId = profileService.findById(profile.getId());

			if (!profileId.isPresent()) {

				profile.setStatus(true);
				profile = profileService.save(profile);
				return new ResponseEntity<Object>("Perfil salvo com sucesso!", HttpStatus.CREATED);

			} else {

				return new ResponseEntity<Object>("Perfil já existente.", HttpStatus.NOT_ACCEPTABLE);
			}
		}
	}

	/**
	 * Função expecifica para alteração do profile
	 * @param profile
	 * @param id
	 * @return
	 */

	@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
	public ResponseEntity<Object> updateProfile(@RequestBody Profile profile, @PathVariable("id") int id){

		Optional<Profile> profileteste = profileService.getProfile(id);

		if(profile.getTipoUser() == 1) {
			return new ResponseEntity<Object>("Profile não encontrado", HttpStatus.NO_CONTENT);
		} else {

			if(profileteste.isPresent()) {
				return new ResponseEntity<Object>("Profile não encontrado", HttpStatus.NO_CONTENT);
			} else {
				profile = profileService.save(profile);
				return new ResponseEntity<Object>(profile, HttpStatus.OK);
			}
		}
	}
}