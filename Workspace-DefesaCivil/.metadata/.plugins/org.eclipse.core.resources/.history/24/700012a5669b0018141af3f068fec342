package com.defesacivil.api.controllers;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties.Admin;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.defesacivil.api.domain.Profile;
import com.defesacivil.api.domain.User;
import com.defesacivil.api.services.ProfileService;
import com.defesacivil.api.services.UserService;


@RestController
@RequestMapping(value = "/profiles")
public class ProfileController {

	@Autowired
	private ProfileService profileService;
	
	/**
	 * Método de criação do Profile
	 * 
	 * @param profile
	 * @param bindingResult
	 * @param true
	 */
	
	@PreAuthorize("hasAnyRole('ADMIN')")
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<Object> add(@Valid @RequestBody Profile profile, BindingResult bindingResult) {
		if (bindingResult.hasErrors()) {
			return new ResponseEntity<Object>(bindingResult.getAllErrors(), HttpStatus.NOT_ACCEPTABLE);

		} else {
			Optional<Profile> profileId = profileService.findById(profile.getId());

			if (!profileId.isPresent()) {

				profile.setStatus(true);
				profile = profileService.save(profile);
				return new ResponseEntity<Object>("Perfil salvo com sucesso!", HttpStatus.CREATED);

			} else {

				return new ResponseEntity<Object>("Perfil já existente.", HttpStatus.NOT_ACCEPTABLE);
			}
		}
	}

	/**
	 * Função expecifica para alteração do profile
	 * @param profile
	 * @param id
	 * @return true/false
	 */
	
	@PreAuthorize("hasAnyRole('ADMIN')")
	@PutMapping
	public ResponseEntity<Object> updateProfile(@RequestBody Profile profile){
		
		Optional<Profile> Profileteste = profileService.getProfile(profile.getId());

		if(Profileteste.isPresent()) {
			profile = profileService.save(profile);
			return new ResponseEntity<Object>("Profile alterado com sucesso!", HttpStatus.OK);
		} else {
			return new ResponseEntity<Object>("Profile não encontrado", HttpStatus.NO_CONTENT);
		}
	}
	
	/**
	 * Função expecifica para deleção do profile
	 * @param profile
	 * @param id
	 * @param true/false
	 */
	
	@PreAuthorize("hasAnyRole('ADMIN')")
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<Object> delete(@PathVariable("id") int id){
		
		Profile profile = profileService.getOne(id);
		profileService.delete(profile);
		
		Optional<Profile> Profileteste = profileService.getProfile(profile.getId());
		
		if(Profileteste.isPresent()) {
			return new ResponseEntity<Object>("Profile não deletado!", HttpStatus.NOT_ACCEPTABLE);
		}else {
			return new ResponseEntity<Object>("Profile deletado con sucesso!", HttpStatus.OK);
		}
	}
	
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public ResponseEntity<Object> getProfile(@RequestBody Optional<Profile> profile, @PathVariable("id") int id){
		profile = profileService.getProfile(id);
		
		if(!profile.isPresent()) {
			return new ResponseEntity<Object>("Profile não encontrado!", HttpStatus.NO_CONTENT);
		} else {
			return new ResponseEntity<Object>(profile, HttpStatus.OK);
		}
	}
}